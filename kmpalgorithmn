 void computeLPSArray(vector<int>& pattern, int m, int* lps)
    {
        int len = 0;
 
        lps[0] = 0;
 
        int i = 1;
        while (i < m) {
                if (pattern[i] == pattern[len]) {
                    len++;
                    lps[i] = len;
                    i++;
                }
            else {
                if (len != 0) {
                    len = lps[len - 1];
                }
                else
                {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }


  int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {
        
        
     int m = pattern.size();
     int n = nums.size();
 
     int lps[m];
 
     computeLPSArray(pattern, m, lps);
        
        
         int i = 0;
         int j = 0; 
         int ct=0;
        n--;
         while ((n - i) >= (m- j)) {
            
          bool check=true;
          if(pattern[j]==0)
          {
              if(nums[i]!=nums[i+1])
              {
                  check=false;
              }
          }
          else if(pattern[j]==1)
          {
              if(nums[i]>=nums[i+1])
              {
                  check=false;
              }
          }
          else if(pattern[j]==-1)
          {
              if(nums[i]<=nums[i+1])
              {
                  check=false;
              }
          }

             if (check) {
                 j++;
                 i++;
             }
  
             if (j == m) {
                 ct++;
                 j = lps[j - 1];
             }
  
            else if (i < n && !check) {
             if (j != 0)
                 j = lps[j - 1];
             else
                 i = i + 1;
         }
       }
        return ct;
    }
